;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                              ;;
;; File: WebMaster.rkt                                          ;;
;; Author: James Kuczynski                                      ;;
;; Email: jkuczyns@cs.uml.edu                                   ;;
;; File Description: This file generates executable .rkt files  ;;
;;                   which launch the web server.               ;;
;;Created 04/03/2015                                            ;;
;;                                                              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#lang racket

(require racket/file)

#|(define (clean)
  (cond ( (equal? (file-exists? "./../output/WebPage.rkt") #t)
          (delete-file "./../output/WebPage.rkt")
        )
  )
  (copy-file "./../output/Template.rkt" "./../output/WebPage.rkt")
)|#

(define output (open-output-file "./../output/WebPage.rkt"
                                 #:mode 'text
                                 #:exists 'update))



;generate (unchanging) main page
(define (generateMainPage fileList reqList inclList provList procList procBodyList docList)
  (write-string "#lang racket\n" output)
  (write-string "(require web-server/servlet web-server/servlet-env)\n" output)
  (write-string "(require racket/gui)\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string ";(define generat\n" output)
  (write-string "\n" output)
  (write-string ";(play-sound \"./share/rach.wav\" #f)\n" output)
  (write-string "\n" output)
  (write-string ";(define logo\n" output)
  (write-string ";  (read-bitmap \"./../share/button.jpg\"))\n" output)
  (write-string "\n" output)
  (write-string "(define (start request)\n" output)
  (write-string "  (main-page request))\n" output)
  (write-string "\n" output)
  (write-string ";\"main\" page:\n" output)
  (write-string "(define (main-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "                    (body (h1 (center \"Racket-Doc Home\"))\n" output)
  (write-string "                          (center\n" output)
  (write-string "                          (a ((href, (embed/url fileList-page))) \"File List\")\n" output)
  (write-string "                          (html nbsp nbsp nbsp nbsp)\n" output)      
  (write-string "                          (a ((href, (embed/url required-page))) \"Required\")\n" output)
  (write-string "                          (html nbsp nbsp nbsp nbsp)\n" output)
  (write-string "                          (a ((href, (embed/url provided-page))) \"Provided\")\n" output)
  (write-string "                          (html nbsp nbsp nbsp nbsp)\n" output)
  (write-string "                          (a ((href, (embed/url procAndData-page))) \"Procedures & Data\")\n" output)
  (write-string "                          (html nbsp nbsp nbsp nbsp)\n" output)
  (write-string "                          (a ((href, (embed/url help-page))) \"Help\"))\n" output)
  (write-string "                          )))))\n" output)
  (write-string "    (send/suspend/dispatch response-generator)))\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string ";;page for displaying file list\n" output)
  (write-string "(define (fileList-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "               (body (h1 \"Test.rkt\")\n" output)
  (write-string "                     (center (a ((href ,(embed/url main-page))) \"Home\"))\n" output)
  (write-string "                     (br)(br)\n" output)
  (write-string "                     (p (b \"Files:\"))\n" output)
  (define (fileLooper lst)
    (cond ( (null? lst)
            (display "")
          )
          (else
           (write-string"                     (a ((href, (embed/url specifiedFile-page))) \"" output)
           (write-string (car lst) output)
           (write-string "\")\n" output)
           (write-string "(br)" output)
           (write-string "(br)" output)
           (fileLooper (cdr lst))
          )
    )
  )
  (fileLooper fileList)  
  (write-string "                     )))))\n" output)
  (write-string "    (send/suspend/dispatch response-generator)))\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string ";;page for displaying file list\n" output)
  (write-string "(define (specifiedFile-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "               (body (h1 \"Test.rkt\")\n" output)
  (write-string "                     (center\n" output)
  (write-string "                      (a ((href ,(embed/url main-page))) \"<--\")\n" output)
  (write-string "                      (html nbsp nbsp nbsp nbsp)\n" output)
  (write-string "                      (a ((href ,(embed/url main-page))) \"Home\")\n" output)
  (write-string "                      (html nbsp nbsp nbsp nbsp)\n" output)
  (write-string "                      (a ((href ,(embed/url main-page))) \"-->\")\n" output)
  (write-string "                      )\n" output)
  (write-string "                     (br)(br)\n" output)
  (write-string "                     (p \"Specified File page\")\n" output)
  (write-string "                     ;add requires\n" output)
  (write-string "                     (b \"Required\")\n" output)
  (write-string "                     (fieldset (code (list " output)
  (define (reqLooper lst)
    (cond ( (null? lst)
            (display "")
          )
          (else
           (write-string "\"" output)
           (write-string (car lst) output)
           (write-string "\"" output)
           (write-string " (br) " output)
           (reqLooper (cdr lst))
          )
    )
  )  
  (reqLooper reqList)
  (write-string ")))" output)
  (write-string "                     (br) (br) (br)\n" output)
  (write-string "                     ;add included\n" output)
  (write-string "                     (b \"Included\")\n" output)
  (write-string "                     (fieldset (code (list " output)
    (define (inclLooper lst)
    (cond ( (null? lst)
            (display "")
          )
          (else
           (write-string "\"" output)
           (write-string (car lst) output)
           (write-string "\"" output)
           (write-string " (br) " output)
           (inclLooper (cdr lst))
          )
    )
  )  
  (inclLooper provList)
  (write-string ")))" output)
  (write-string "                     (br) (br) (br)\n" output)
  (write-string "                     ;add provided\n" output);;begin---------------------
  (write-string "                     (b \"Provided\")\n" output)
  (write-string "                     (fieldset (code (list " output)
  (define (provLooper lst)
    (cond ( (null? lst)
            (display "")
          )
          (else
           (write-string "\"" output)
           (write-string (car lst) output)
           (write-string "\"" output)
           (write-string " (br) " output)
           (provLooper (cdr lst))
          )
    )
  )  
  (provLooper provList)
  (write-string ")))" output)
  (write-string "                     (br) (br) (br)\n" output);;end------------
  (write-string "                     ;;add procs and data\n" output);;begin-----------------
  (write-string "                     (b \"Procedures & Data\")\n" output)
  (define (procLooper pLst dLst count)
    (cond ( (null? pLst)
            (display "")
          )
          (else
           (write-string "                     (fieldset\n" output)
           (write-string "                      (code (list (b \"" output)
           (write-string (car pLst) output)
           (write-string "\") (br)" output)
           (write-string "\n" output)
           (write-string "                             (i " output)
           (write-string "\"" output)
           (write-string (car dLst) output)
           (write-string "\") (br)" output)
           (write-string ")))" output)
           (write-string "\n                     (a ((href, (embed/url codeblock" output)
           (write-string (number->string count) output)
           (write-string "-page))) \"Code\")\n" output)
           (write-string "                             (br) (br) (br)\n" output)
           (procLooper (cdr pLst) (cdr dLst) (+ count 1))
          )
    )
  )
  (procLooper procList docList 0)
  (write-string "                         )))))\n" output)  
  (write-string "    (send/suspend/dispatch response-generator)))" output)
  (write-string "\n\n\n")
  
  (write-string ";;page for displaying dependencies\n" output);;begin----------
  (write-string "(define (required-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "               (body (h1 \"Dependencies\")\n" output)
  (write-string "                     (center (a ((href ,(embed/url main-page))) \"Home\"))\n" output)
  (write-string "                     (br)(br)\n" output)
  (write-string "                     (b \"Required\")\n" output)                  
  (write-string "                     (fieldset (code (list " output)
  (reqLooper reqList)
  (write-string ")))\n" output)
  (write-string "                     )))))\n" output)
  (write-string "    (send/suspend/dispatch response-generator)))\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "\n\n\n");;end-----------
  
  (write-string ";;page for displaying provideds\n" output);;begin---------
  (write-string "(define (provided-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "               (body (h1 \"Provided\")\n" output)
  (write-string "                     (center (a ((href ,(embed/url main-page))) \"Home\"))\n" output)
  (write-string "                     (b \"Provided\")\n" output)
  (write-string "                     (fieldset (code (list " output)
  (provLooper provList)
  (write-string ")))\n" output)
  (write-string "                     )))))\n" output)
  (write-string "    (send/suspend/dispatch response-generator)))\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "\n\n\n");;end-----------
  
  ;;generate procs & data page
  (write-string ";;page for displaying procs and data of a single file\n" output);;begin---------
  (write-string "(define (procAndData-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "               (body (h1 \"Procedures & Data\")\n" output)
  (write-string "                     (center (a ((href ,(embed/url main-page))) \"Home\"))\n" output)
  (write-string "                     ;;add procs and data\n" output)
  (write-string "                     (br) (br)\n" output)
  (procLooper procList docList 0)
  (write-string "                     )))))\n" output)
  (write-string "    (send/suspend/dispatch response-generator)))\n" output)
  (write-string "\n" output)
  (write-string "\n" output);;end
  
  ;;generate proc body pages (each will be named "codeblock[number]-page")
  (define (bodyLooper lst count)
    (cond ( (null? lst)
            (display "")
          )
          (else
           (write-string ";;page for displaying a procedure body." output)
           (write-string ";;help page\n" output)
           (write-string "(define (codeblock" output)
           (write-string (number->string count) output)
           (write-string "-page" output)
           (write-string " request)\n" output)
           (write-string "  (local ((define (response-generator embed/url)\n" output)
           (write-string "            (response/xexpr\n" output)
           (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
           (write-string "               (body (h1 \"" output)
           (write-string (car lst) output)
           (write-string "\")\n" output)
           (write-string "                     (center (a ((href ,(embed/url specifiedFile-page))) \"<--Back\"))\n" output)
           (write-string "                     (br)(br)\n" output)
           (write-string "                     (p \"" output)
           (write-string (car lst) output)
           (write-string "\")\n" output)
           (write-string "                     )))))\n" output)
           (write-string "    (send/suspend/dispatch response-generator)))\n" output)
           (write-string "\n" output)
           (write-string "\n" output)
           (bodyLooper (cdr lst) (+ count 1))
          )
     )
  )
  (bodyLooper procBodyList 0)         
  
  ;;generate help page
  (write-string ";;help page\n" output)
  (write-string "(define (help-page request)\n" output)
  (write-string "  (local ((define (response-generator embed/url)\n" output)
  (write-string "            (response/xexpr\n" output)
  (write-string "             `(html (head (title \"Racket-Doc\"))\n" output)
  (write-string "               (body (h1 \"Help\")\n" output)
  (write-string "                     (center (a ((href ,(embed/url main-page))) \"Home\"))\n" output)
  (write-string "                     (br)(br)\n" output)
  (write-string "                     (p \"help page...\")\n" output)
  (write-string "                     )))))\n" output)
  (write-string "    (send/suspend/dispatch response-generator)))\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "\n" output)
  (write-string "(serve/servlet start\n" output)
  (write-string "               #:listen-ip \"127.0.0.1\"\n" output)
  (write-string "               ;#:port 8080\n" output)
  (write-string "               #:servlet-path \"/\")\n" output)
  (close-output-port output)
)

;;exe-------------------
;(clean)
(generateMainPage '("file_1" "file_2" "file_3" "file_4" "file_5" "file_6" "file_7" "file_8")
                  '("req_1"  "req_2"  "req_3"  "req_4"  "req_5"  "req_6"  "req_7"  "req_8")
                  '("incl_1" "incl_2" "incl_3" "incl_4" "incl_5" "incl_6" "incl_7" "incl_8")
                  '("prov_1" "prov_2" "prov_3" "prov_4" "prov_5" "prov_6" "prov_7" "prov_8")
                  '("proc_1" "proc_2" "proc_3" "proc_4" "proc_5")
                  '("procBody_1" "procBody_2" "procBody_3" "procBody_4" "procBody_5")
                  '("blockComment_1" "blockComment_2" "blockComment_3" "blockComment_4" "blockComment_5"))
