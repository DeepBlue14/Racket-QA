#lang racket/gui

(require "email-db.rkt"
         "email-db-entry-edit-ui.rkt")

(init-email-db)

(define manage-mailing-list-dialog
  (new dialog%
       (label "Manage Mailing List")
       (spacing 2)
       (style '(close-button))))

(define main-h-panel
  (new horizontal-panel%
       (parent manage-mailing-list-dialog)
       (spacing 10)
       (border 8)
       (alignment '(left top))))

(define left-v-panel
  (new vertical-panel%
       (parent main-h-panel)
       (spacing 0)
       (alignment '(center top))))

(define right-v-panel
  (new vertical-panel%
       (parent main-h-panel)
       (alignment '(left top))))

;; List box for the list of email-dbs (left pane).
(define email-db-list-box
  (new list-box%
       (parent left-v-panel)
       (label #f)
       (choices '())
       (horiz-margin 0)
       (vert-margin 0)
       (min-width 150)
       (min-height 400)
       (stretchable-height #f)
       (callback
        (lambda (list click-type)          
          (populate-email-address-list-box)))))

(define (populate-email-db-list-box)
  (define (add-to-list-box db)
    (define db-name (email-db-name db))
    (send email-db-list-box append db-name db))
  (cond ((equal? (length email-db-list) 0)
         (send email-db-list-box append "There is no mailing list"))
        (else (map add-to-list-box email-db-list))))


;; Drop-down menu below the email db list box.
(define email-db-actions-choice
  (new choice%
       (parent left-v-panel)
       (label #f)
       (min-width (send email-db-list-box min-width))
       (horiz-margin 0)
       (vert-margin 0)       
       (choices (list "Mailing List Actions" 
                      "Add Mailing List..."
                      "Delete selected mailing list"))))

;; box enclosing the selected email-db name
(define selected-email-db-title-box
  (new pane%
       (parent right-v-panel)
       (min-height 30)
       (stretchable-width #f)
       (stretchable-height #f)
       (alignment '(left center))))

(define selected-email-db-title-label
  (new message%
       (parent selected-email-db-title-box)
       (label "")))

;; pane below the selected email-db title box
(define right-email-db-pane
  (new pane%
       (parent right-v-panel)
       (alignment '(left top))))

;; (define right-bottom-space-filler-pane
;;  (new pane%
;;       (parent right-v-panel)
;;       (min-height 50)
;;       (stretchable-height #f)))

(define NAME-COLUMN 0)
(define EMAIL-COLUMN 1)

(define email-db-horizontal-pane
  (new horizontal-pane%
       (parent right-email-db-pane)
       (alignment '(left top))))

;; list box containing all persons in the currently selected email-db.
(define email-address-list-box
  (new list-box%
       (parent email-db-horizontal-pane)
       (label #f)
       (choices '())
       (horiz-margin 0)
       (vert-margin 0)
       (min-width 300)
       (min-height 350)
       (stretchable-width #f)
       (stretchable-height #f)
       (columns '("Name" "E-mail"))
       (style '(single vertical-label column-headers)))) 
(send email-address-list-box set-column-width NAME-COLUMN 120 30 250)   ; width, min-width, max-width
(send email-address-list-box set-column-width EMAIL-COLUMN 150 30 250)

(define (populate-email-address-list-box)
  (send email-address-list-box clear)
  (define selection (car (send email-db-list-box get-selections)))
  (define db (send email-db-list-box get-data selection))
  (when (not (equal? db #f))
    (send selected-email-db-title-label set-label (email-db-name db))
    (define db-entries (email-db-entries db))
    (define (add-to-list db-entry)
      (define name (email-db-entry-name db-entry))
      (define address (email-db-entry-email-address db-entry))
      (send email-address-list-box append name db-entry)
      (define last (- (send email-address-list-box get-number) 1))
      (send email-address-list-box set-string last address EMAIL-COLUMN))
    (map add-to-list db-entries)))

;; contains Edit, Add, Delete buttons.
(define email-db-buttons-vertical-pane
  (new vertical-pane%
       (parent email-db-horizontal-pane)
       (alignment '(left top))))

;; Edit button
(define email-db-edit-button
  (new button%
       (parent email-db-buttons-vertical-pane)
       (label "Edit...")
       (callback 
        ;; what happens when Edit... button is clicked
        (lambda (button event)
          ;; find out the old entry
          (define selection-index (send email-address-list-box get-selection))
          (when (not (equal? selection-index #f))
            (define old-entry (send email-address-list-box get-data selection-index))
            (when (not (equal? old-entry #f))
              (define new-entry (open-email-db-entry-edit button event old-entry))
              (when (not (null? new-entry))
                (define db-selection (car (send email-db-list-box get-selections)))
                (define db (send email-db-list-box get-data db-selection))
                (define db-id (email-db-id db))
                (replace-email-db-entry db-id old-entry new-entry)
                (populate-email-address-list-box))))))))
            

;; Add button
(define email-db-add-button
  (new button%
       (parent email-db-buttons-vertical-pane)
       (label "Add...")
       (callback
        ;; what happens when Add... button is clicked
        (lambda (button event) (void)))))

;; Delete button
(define email-db-delete-button
  (new button%
       (parent email-db-buttons-vertical-pane)
       (label "Delete")
       (callback
        ;; what happens when Delete button is clicked
        (lambda (button event) (void)))))





(make-object color% "DodgerBlue")

(populate-email-db-list-box)
(define (open-manage-mailing-list-dialog)
  (send manage-mailing-list-dialog show #t))
(open-manage-mailing-list-dialog)
